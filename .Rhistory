theme_classic() +
#theme(axis.title.x=element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
#theme(axis.title.y=element_blank(),axis.text.y = element_text(size=20,color="black"),axis.ticks.y=element_blank()) +
#theme(legend.position = "none")
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("darkred", "lightblue")) +
geom_jitter(position = position_jitter(0.2)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2) aes(fill=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(fill=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(fill=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic() +
#theme(axis.title.x=element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
#theme(axis.title.y=element_blank(),axis.text.y = element_text(size=20,color="black"),axis.ticks.y=element_blank()) +
#theme(legend.position = "none")
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35, outlier.shape = "none") +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic() +
#theme(axis.title.x=element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank()) +
#theme(axis.title.y=element_blank(),axis.text.y = element_text(size=20,color="black"),axis.ticks.y=element_blank()) +
#theme(legend.position = "none")
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35, outlier.shape = "none") +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = "crosshatch", pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
?scale_pattern_manual
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("points", "crosshatch")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("point", "crosshatch")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("stripe", "crosshatch")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("crosshatch", "stripe")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" ="stripe")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("task2" = "crosshatch", "task1" ="stripe")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("red", "lightblue")) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" ="stripe")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_density_manual(values= c("task1" = 0.3, "task2" = 0.7)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_density_manual(values= c("task1" = 0.1, "task2" = 0.9)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
#scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
#scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_density_manual(values= c("task1" = 0.1, "task2" = 0.9)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
#scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
#scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_density_manual(values= c( 0.1, 0.9)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
#scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
#scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_density_manual(values= c( 0.35, 0.35)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), outlier.shape = NA) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), outlier.shape = NA) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
scale_pattern_density_manual(values=c("task1" = 0.35, "task2" = 0.7)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
?scale_pattern_density_manual
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), outlier.shape = NA) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
scale_pattern_density_manual(values=c(0.35, 0.7)) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
ggplot(plot_data, aes(x=Species, y=Sepal.Length)) +
geom_boxplot_pattern(aes(pattern = task, pattern_fill = task), pattern_density = 0.35, outlier.shape = NA) +
scale_pattern_manual(values= c("task1" = "crosshatch", "task2" = "stripe")) +
scale_pattern_fill_manual(values=c("task1" = "red", "task2" = "lightblue")) +
geom_jitter(position = position_jitter(0.2), aes(color=task)) +
theme_classic()
setwd("~/Desktop/Labwork/Data_Wrangling_Test_Project")
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("tidyverse")
## import patient data
patient_clinical_data <- read_csv(file = "data/Patient_clinical_data.csv")
# fix column names
colnames(patient_clinical_data) <- c("Study_ID", "Patient_ID", "Sex", "Age")
patient_clinical_data <- patient_clinical_data %>%
mutate(Unique_Patient_ID = paste(Study_ID, Patient_ID, sep = "_")) %>% # create Unique_Patient_ID
mutate(Sex = ifelse(Sex == "M", "MALE", "FEMALE")) %>% # recode values
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age) # reorder columns
head(patient_clinical_data)
# import tissue sample metadata
tissue_sample_metadata <- read_csv(file = "data/Tissue_sample_metadata.csv")
colnames(tissue_sample_metadata) <- c("Patient_ID", "Sample_ID", "Sample_General_Pathology", "Material", "RIN", "Total_Reads")
tissue_sample_metadata <- tissue_sample_metadata %>%
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology) %>%
mutate(Sample_General_Pathology = recode(Sample_General_Pathology, ## recode values
`Normal` = "NORMAL",
`Liver Tumor` = "PRIMARY",
`Metastic Lung` = "METASTATIC"))
head(tissue_sample_metadata)
# import RNA seq data
rna_seq_data <- read_csv(file = "data/RNA_seq_data.csv")
# wrangle RNA seq data
rna_seq_data <- rna_seq_data %>%
pivot_longer(-GeneID, names_to = "Sample_ID", values_to = "Result") %>%
rename(Gene_Symbol = GeneID) %>%
mutate(Material_type = "RNA") %>%
mutate(Result_Units = "RPKM") %>%
mutate(Status = NA) %>%
left_join(tissue_sample_metadata) %>% ## add tissue sample metadata
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
# import serum protein data
serum_protein_data <- read_csv(file = "data/Serum_protein_data.csv")
colnames(serum_protein_data) <- c("Patient_ID", "Sample_ID", "IL6", "IL6R")
# wrangle serum protein data
serum_protein_data <- serum_protein_data %>%
pivot_longer(starts_with("IL"), names_to = "Gene_Symbol", values_to = "Result") %>%
mutate(Sample_ID = toupper(Sample_ID)) %>%
mutate(Material_type = "SERUM") %>%
mutate(Result_Units = "g/L") %>%
mutate(Sample_General_Pathology = NA) %>% ## need this to combine assay data
mutate(Status = ifelse(is.na(as.numeric(Result)), "NOT DONE", NA)) %>%
mutate(Result = ifelse(is.na(as.numeric(Result)), NA, Result)) %>%
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
# Combine Assay results
assay_results <- rbind(rna_seq_data, serum_protein_data)
head(assay_results)
head(report_data)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
head(report_data)
report_data$Age <- as.integer(report_data$Age)
head(assay_results)
report_data$Age <- as.integer(report_data$Age)
head(report_data)
report_data$Result <- as.numeric(report_data$Result)
head(report_data)
View(report_data)
unique(report_data$Patient_ID)
8*21
View(patient_clinical_data)
rna_seq_data <- read_csv(file = "data/RNA_seq_data.csv")
# wrangle RNA seq data
rna_seq_data <- rna_seq_data %>%
pivot_longer(-GeneID, names_to = "Sample_ID", values_to = "Result") %>%
rename(Gene_Symbol = GeneID) %>%
mutate(Material_type = "RNA") %>%
mutate(Result_Units = "RPKM") %>%
mutate(Status = NA) %>%
left_join(tissue_sample_metadata) %>% ## add tissue sample metadata
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
View(rna_seq_data)
unique(patient_clinical_data$Patient_ID)
unique(serum_protein_data$Patient_ID)
unique(patient_clinical_data$Patient_ID)
for (patient in unique(patient_clinical_data$Patient_ID)){
print(patient)
}
for (patient in unique(patient_clinical_data$Patient_ID)){
print(patient %% 100)
}
all_sample_ids <- c()
for (patient in unique(patient_clinical_data$Patient_ID)){
patient_number <- patient %% 100 #extracts last one or two digits from patient id
for(pathology in c("N", "T", "M")){
sample_id <- paste("CRC", patient_number, pathology)
all_sample_ids <- c(all_sample_ids, sample_id)
}
}
all_sample_ids
all_sample_ids <- c()
for (patient in unique(patient_clinical_data$Patient_ID)){
patient_number <- patient %% 100 #extracts last one or two digits from patient id
for(pathology in c("N", "T", "M")){
for(gene_symbol in unique(rna_seq_data$Gene_Symbol)){
sample_id <- paste0("CRC", patient_number, pathology, "_", gene_symbol)
all_sample_ids <- c(all_sample_ids, sample_id)
}
}
}
all_sample_ids
test <- rna_seq_data %>%
mutate(sampleIDxgene = paste(Sample_ID, Gene_Symbol, sep = "_"))
View(test)
all_samples <- c()
for (patient in unique(patient_clinical_data$Patient_ID)){
patient_number <- patient %% 100 #extracts last one or two digits from patient id
for(pathology in c("N", "T", "M")){
for(gene_symbol in unique(rna_seq_data$Gene_Symbol)){
sample_id <- paste0("CRC", patient_number, pathology, "_", gene_symbol)
all_samples <- c(all_samples, sample_id)
}
}
}
all_samples
observed_samples <-paste(rna_seq_data$Sample_ID, rna_seq_data$Gene_Symbol, sep = "_")
observed_samples
missing_samples <- all_samples[all_samples %in% observed_samples]
missing_samples
missing_samples <- all_samples[!(all_samples %in% observed_samples)]
missing_samples
strsplit("CRC10M_VCAM1", "_")
strsplit("CRC10M_VCAM1", "_")[0]
strsplit("CRC10M_VCAM1", "_")[1]
strsplit("CRC10M_VCAM1", "_")[1][1]
strsplit("CRC10M_VCAM1", "_")[1][2]
strsplit("CRC10M_VCAM1", "_")[2][1]
strsplit("CRC10M_VCAM1", "_")[[1]]
strsplit("CRC10M_VCAM1", "_")[[1]][1]
strsplit("CRC10M_VCAM1", "_")[[1]][2]
all_samples <- c()
for (patient in unique(patient_clinical_data$Patient_ID)){
patient_number <- patient %% 100 #extracts last one or two digits from patient id
for(pathology in c("N", "T", "M")){
for(gene_symbol in unique(rna_seq_data$Gene_Symbol)){
sample_id <- paste0(patient,"_","CRC", patient_number, pathology, "_", gene_symbol)
all_samples <- c(all_samples, sample_id)
}
}
}
observed_samples <- paste(patient, rna_seq_data$Sample_ID, rna_seq_data$Gene_Symbol, sep = "_")
missing_samples <- all_samples[!(all_samples %in% observed_samples)]
missing_samples
endsWith("N", "CRC11N")
endsWith("CRC11N","N")
for (sample in missing_samples){
Patient_ID <- strsplit(sample, "_")[[1]][1]
Sample_ID <- strsplit(sample, "_")[[1]][2]
Gene_Symbol <- strsplit(sample, "_")[[1]][3]
Sample_General_Pathology <- ifelse(endsWith(Sample_ID,"N"), "NORMAL",ifelse(endsWith(Sample_ID,"M"), "METASTATIC", "PRIMARY"))
row <- c(Patient_ID, Sample_ID, Sample_General_Pathology, "RNA", Gene_Symbol, NA, "RPKM", "NOT DONE")
print(row)
}
missing_samples
observed_samples
missing_samples
missing_samples <- all_samples[!(all_samples %in% observed_samples)]
missing_samples
all_samples
observed_samples
all_samples
observed_samples
observed_samples <- paste(rna_seq_data$patient, rna_seq_data$Sample_ID, rna_seq_data$Gene_Symbol, sep = "_")
observed_samples
observed_samples <- paste(rna_seq_data$Patient_ID, rna_seq_data$Sample_ID, rna_seq_data$Gene_Symbol, sep = "_")
observed_samples
missing_samples <- all_samples[!(all_samples %in% observed_samples)]
missing_samples
for (sample in missing_samples){
Patient_ID <- strsplit(sample, "_")[[1]][1]
Sample_ID <- strsplit(sample, "_")[[1]][2]
Gene_Symbol <- strsplit(sample, "_")[[1]][3]
Sample_General_Pathology <- ifelse(endsWith(Sample_ID,"N"), "NORMAL",ifelse(endsWith(Sample_ID,"M"), "METASTATIC", "PRIMARY"))
row <- c(Patient_ID, Sample_ID, Sample_General_Pathology, "RNA", Gene_Symbol, NA, "RPKM", "NOT DONE")
print(row)
}
for (sample in missing_samples){
Patient_ID <- strsplit(sample, "_")[[1]][1]
Sample_ID <- strsplit(sample, "_")[[1]][2]
Gene_Symbol <- strsplit(sample, "_")[[1]][3]
Sample_General_Pathology <- ifelse(endsWith(Sample_ID,"N"), "NORMAL",ifelse(endsWith(Sample_ID,"M"), "METASTATIC", "PRIMARY"))
row <- c(Patient_ID, Sample_ID, Sample_General_Pathology, "RNA", Gene_Symbol, NA, "RPKM", "NOT DONE")
rna_seq_data <- rbind(rna_seq_data, row)
}
# Combine Assay results
assay_results <- rbind(rna_seq_data, serum_protein_data)
head(assay_results)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
rna_seq_data <- read_csv(file = "data/RNA_seq_data.csv")
# wrangle RNA seq data
rna_seq_data <- rna_seq_data %>%
pivot_longer(-GeneID, names_to = "Sample_ID", values_to = "Result") %>%
rename(Gene_Symbol = GeneID) %>%
mutate(Material_type = "RNA") %>%
mutate(Result_Units = "RPKM") %>%
mutate(Status = NA) %>%
left_join(tissue_sample_metadata) %>% ## add tissue sample metadata
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
## find missing data rows
all_samples <- c()
for (patient in unique(patient_clinical_data$Patient_ID)){
patient_number <- patient %% 100 #extracts last one or two digits from patient id
for(pathology in c("N", "T", "M")){
for(gene_symbol in unique(rna_seq_data$Gene_Symbol)){
sample_id <- paste0(patient,"_","CRC", patient_number, pathology, "_", gene_symbol)
all_samples <- c(all_samples, sample_id)
}
}
}
observed_samples <- paste(rna_seq_data$Patient_ID, rna_seq_data$Sample_ID, rna_seq_data$Gene_Symbol, sep = "_")
missing_samples <- all_samples[!(all_samples %in% observed_samples)]
## add rows for missing data
for (sample in missing_samples){
Patient_ID <- strsplit(sample, "_")[[1]][1]
Sample_ID <- strsplit(sample, "_")[[1]][2]
Gene_Symbol <- strsplit(sample, "_")[[1]][3]
Sample_General_Pathology <- ifelse(endsWith(Sample_ID,"N"), "NORMAL",ifelse(endsWith(Sample_ID,"M"), "METASTATIC", "PRIMARY"))
row <- c(as.numeric(Patient_ID), Sample_ID, Sample_General_Pathology, "RNA", Gene_Symbol, NA, "RPKM", "NOT DONE")
rna_seq_data <- rbind(rna_seq_data, row)
}
# Combine Assay results
assay_results <- rbind(rna_seq_data, serum_protein_data)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
## import patient data
patient_clinical_data <- read_csv(file = "data/Patient_clinical_data.csv")
# fix column names
colnames(patient_clinical_data) <- c("Study_ID", "Patient_ID", "Sex", "Age")
patient_clinical_data <- patient_clinical_data %>%
mutate(Unique_Patient_ID = paste(Study_ID, Patient_ID, sep = "_")) %>% # create Unique_Patient_ID
mutate(Sex = ifelse(Sex == "M", "MALE", "FEMALE")) %>% # recode values
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age) # reorder columns
head(patient_clinical_data)
# import tissue sample metadata
tissue_sample_metadata <- read_csv(file = "data/Tissue_sample_metadata.csv")
colnames(tissue_sample_metadata) <- c("Patient_ID", "Sample_ID", "Sample_General_Pathology", "Material", "RIN", "Total_Reads")
tissue_sample_metadata <- tissue_sample_metadata %>%
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology) %>%
mutate(Sample_General_Pathology = recode(Sample_General_Pathology, ## recode values
`Normal` = "NORMAL",
`Liver Tumor` = "PRIMARY",
`Metastic Lung` = "METASTATIC"))
head(tissue_sample_metadata)
# import RNA seq data
rna_seq_data <- read_csv(file = "data/RNA_seq_data.csv")
# wrangle RNA seq data
rna_seq_data <- rna_seq_data %>%
pivot_longer(-GeneID, names_to = "Sample_ID", values_to = "Result") %>%
rename(Gene_Symbol = GeneID) %>%
mutate(Material_type = "RNA") %>%
mutate(Result_Units = "RPKM") %>%
mutate(Status = NA) %>%
left_join(tissue_sample_metadata) %>% ## add tissue sample metadata
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
## find missing data rows
all_samples <- c()
for (patient in unique(patient_clinical_data$Patient_ID)){
patient_number <- patient %% 100 #extracts last one or two digits from patient id
for(pathology in c("N", "T", "M")){
for(gene_symbol in unique(rna_seq_data$Gene_Symbol)){
sample_id <- paste0(patient,"_","CRC", patient_number, pathology, "_", gene_symbol)
all_samples <- c(all_samples, sample_id)
}
}
}
observed_samples <- paste(rna_seq_data$Patient_ID, rna_seq_data$Sample_ID, rna_seq_data$Gene_Symbol, sep = "_")
missing_samples <- all_samples[!(all_samples %in% observed_samples)]
## add rows for missing data
for (sample in missing_samples){
Patient_ID <- strsplit(sample, "_")[[1]][1]
Sample_ID <- strsplit(sample, "_")[[1]][2]
Gene_Symbol <- strsplit(sample, "_")[[1]][3]
Sample_General_Pathology <- ifelse(endsWith(Sample_ID,"N"), "NORMAL",ifelse(endsWith(Sample_ID,"M"), "METASTATIC", "PRIMARY"))
row <- c(as.numeric(Patient_ID), Sample_ID, Sample_General_Pathology, "RNA", Gene_Symbol, NA, "RPKM", "NOT DONE")
rna_seq_data <- rbind(rna_seq_data, row)
}
head(rna_seq_data)
# import serum protein data
serum_protein_data <- read_csv(file = "data/Serum_protein_data.csv")
colnames(serum_protein_data) <- c("Patient_ID", "Sample_ID", "IL6", "IL6R")
# wrangle serum protein data
serum_protein_data <- serum_protein_data %>%
pivot_longer(starts_with("IL"), names_to = "Gene_Symbol", values_to = "Result") %>%
mutate(Sample_ID = toupper(Sample_ID)) %>%
mutate(Material_type = "SERUM") %>%
mutate(Result_Units = "g/L") %>%
mutate(Sample_General_Pathology = NA) %>% ## need this to combine assay data
mutate(Status = ifelse(is.na(as.numeric(Result)), "NOT DONE", NA)) %>%
mutate(Result = ifelse(is.na(as.numeric(Result)), NA, Result)) %>%
dplyr::select(Patient_ID, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
# Combine Assay results
assay_results <- rbind(rna_seq_data, serum_protein_data)
head(assay_results)
View(assay_results)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
# fix data type
report_data$Patient_ID <- as.numeric(report_data$Patient_ID)
# fix data type
assay_results$Patient_ID <- as.numeric(assay_results$Patient_ID)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status)
# fix data types
report_data$Age <- as.integer(report_data$Age)
report_data$Result <- as.numeric(report_data$Result)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status) %>%
arrange(Patient_ID, Material_Type)
report_data <- patient_clinical_data %>%
left_join(assay_results, by = "Patient_ID") %>%
dplyr::select(Study_ID, Patient_ID, Unique_Patient_ID, Sex, Age, Sample_ID, Sample_General_Pathology, Material_type, Gene_Symbol, Result, Result_Units, Status) %>%
arrange(Patient_ID, Material_type)
# fix data types
report_data$Age <- as.integer(report_data$Age)
report_data$Result <- as.numeric(report_data$Result)
